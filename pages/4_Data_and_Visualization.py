import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import altair as alt

st.title("ЁЯУК ржЕржзрзНржпрж╛рзЯ рзк: ржбрзЗржЯрж╛ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржУ Visualization")

st.title("""
         ржПржЦрж╛ржирзЗ рждрзБржорж┐ рж╢рж┐ржЦржмрзЗ:

st.table(), st.dataframe(), st.json() ржжрж┐рзЯрзЗ ржбрзЗржЯрж╛ ржжрзЗржЦрж╛ржирзЛ

рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯ, ржмрж╛рж░ ржЪрж╛рж░рзНржЯ, ржПрж░рж┐рзЯрж╛ ржЪрж╛рж░рзНржЯ

Plotly, Matplotlib, Altair ржжрж┐рзЯрзЗ ржХрж╛рж╕рзНржЯржо ржнрж┐ржЬрзБрзЯрж╛рж▓рж╛ржЗржЬрзЗрж╢ржи
""")

st.subheader("ЁЯУЛ Table ржУ DataFrame")

data = {
    "ржирж╛ржо": ["рж░рж╛рж╣рзБрж▓", "рж╕рзБржоржирж╛", "ржЬрзЛржмрж╛ржпрж╝рзЗрж░", "рждрзГрж╖рж╛"],
    "рж╕рзНржХрзЛрж░": [85, 92, 78, 88],
    "ржЧрзНрж░рзЗржб": ["A", "A+", "B", "A"]
}
df = pd.DataFrame(data)

st.write("ЁЯСЙ `st.table()` (static table)")
st.table(df)

st.write("ЁЯСЙ `st.dataframe()` (interactive)")
st.dataframe(df)

st.divider()
st.write("ржирж┐ржЪрзЗ ржХрзЛржбржЧрзБрж▓рзЛ ржХржкрж┐ ржХрж░рзЗ рж░рж╛ржи ржХрж░.")

st.code('''st.subheader("ЁЯУЛ Table ржУ DataFrame")

data = {
    "ржирж╛ржо": ["рж░рж╛рж╣рзБрж▓", "рж╕рзБржоржирж╛", "ржЬрзЛржмрж╛ржпрж╝рзЗрж░", "рждрзГрж╖рж╛"],
    "рж╕рзНржХрзЛрж░": [85, 92, 78, 88],
    "ржЧрзНрж░рзЗржб": ["A", "A+", "B", "A"]
}
df = pd.DataFrame(data)

st.write("ЁЯСЙ `st.table()` (static table)")
st.table(df)

st.write("ЁЯСЙ `st.dataframe()` (interactive)")
st.dataframe(df)''', language='bash')

with st.expander("ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржжрзЗржЦрзБржи"):
    
    st.subheader("ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛрж░ ржмрзНржпрж╛ржЦрзНржпрж╛")
    st.write("""
    рждрзБржорж┐ ржПржХржЯрж┐ DataFrame (ржЯрзЗржмрж┐рж▓) ржмрж╛ржирж╛ржЪрзНржЫрзЛ ржПржмржВ рж╕рзЗржЯрж╛ Streamlit-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржжрзБржЗржнрж╛ржмрзЗ ржжрзЗржЦрж╛ржЪрзНржЫрзЛ:

    тЬЕ `st.table()` тЖТ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг (static) ржЯрзЗржмрж┐рж▓

    тЬЕ `st.dataframe()` тЖТ ржПржХржЯрж┐ ржЗржирзНржЯрж╛рж░тАМрзНржпрж╛ржХржЯрж┐ржн (interactive) ржЯрзЗржмрж┐рж▓
    """)

    st.subheader("ржкрзНрж░рждрж┐ржЯрж┐ рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:")

    st.write("""
    data = {
        "ржирж╛ржо": ["рж░рж╛рж╣рзБрж▓", "рж╕рзБржоржирж╛", "ржЬрзЛржмрж╛ржпрж╝рзЗрж░", "рждрзГрж╖рж╛"],
        "рж╕рзНржХрзЛрж░": [85, 92, 78, 88],
        "ржЧрзНрж░рзЗржб": ["A", "A+", "B", "A"]
    }

    ЁЯФ╣ рждрзБржорж┐ ржПржХржЯрж╛ dictionary ржмрж╛ржирж┐рзЯрзЗржЫрзЛ ржпрзЗржЯрж╛рждрзЗ рзйржЯрж┐ ржХрж▓рж╛ржо ржЖржЫрзЗ:
    - "ржирж╛ржо" тЖТ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАржжрзЗрж░ ржирж╛ржо
    - "рж╕рзНржХрзЛрж░" тЖТ рждрж╛ржжрзЗрж░ ржиржорзНржмрж░
    - "ржЧрзНрж░рзЗржб" тЖТ рждрж╛ржжрзЗрж░ ржЧрзНрж░рзЗржб
    """)

    st.write("""
    df = pd.DataFrame(data)

    ЁЯФ╕ рждрзБржорж┐ ржУржЗ dictionary-ржХрзЗ pandas ржПрж░ DataFrame ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗржЫрзЛ тАФ ржПржЯрж╛ ржЖрж╕рж▓рзЗ ржПржХржЯрж┐ ржЯрзЗржмрж┐рж▓ ржлрж░ржорзНржпрж╛ржЯрзЗ ржбрзЗржЯрж╛ред
    """)

    st.write("""
    st.write("ЁЯСЙ st.table() (static table)")
    st.table(df)

    ЁЯФ╕ ржПржЦрж╛ржирзЗ рждрзБржорж┐ `st.table(df)` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ static table ржжрзЗржЦрж┐рзЯрзЗржЫрзЛред
    Static ржорж╛ржирзЗ: рж╢рзБржзрзБ ржжрзЗржЦрждрзЗ ржкрж╛рж░ржмрзЗ, ржХрж┐ржирзНрждрзБ ржХрж┐ржЫрзБ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ (ржпрзЗржоржи рж╕рзНржХрзНрж░рж▓, ржлрж┐рж▓рзНржЯрж╛рж░, рж░рж┐рж╕рж╛ржЗржЬ ржЗрждрзНржпрж╛ржжрж┐ ржирж╛)ред
    """)

    st.write("""
    st.write("ЁЯСЙ st.dataframe() (interactive)")
    st.dataframe(df)

    ЁЯФ╕ ржПржЦрж╛ржирзЗ `st.dataframe(df)` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЛред
    Interactive ржорж╛ржирзЗ:
    - ржХрж▓рж╛ржоржЧрзБрж▓рзЛ рж░рж┐рж╕рж╛ржЗржЬ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ
    - ржЯрзЗржмрж┐рж▓ржЯрж╛ рж╕рзНржХрзНрж░рж▓ ржХрж░рж╛ ржпрж╛ржмрзЗ
    - рж╕рзНрж▓рж╛ржЗржбрж┐ржВ ржХрж░рзЗ ржбрзЗржЯрж╛ ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ
    """)


st.divider()






st.subheader("ЁЯУж JSON ржбрзЗржЯрж╛")
st.json({
    "name": "Streamlit App",
    "version": "1.0",
    "features": ["simple", "fast", "interactive"]
})

st.divider()

st.write("ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛ ржХржкрж┐ ржХрж░рзЗ рж░рж╛ржи ржХрж░.")

st.code('''st.subheader("ЁЯУж JSON ржбрзЗржЯрж╛")
st.json({
    "name": "Streamlit App",
    "version": "1.0",
    "features": ["simple", "fast", "interactive"]
})

''', language='bash')

st.subheader("""ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛ ржмрзНржпрж╛ржЦрзНржпрж╛:
             
st.json({
             
    "name": "Streamlit App",
             
    "version": "1.0",
             
    "features": ["simple", "fast", "interactive"]
})
ЁЯФ╣ ржПржЗ рж▓рж╛ржЗржирзЗ рждрзБржорж┐ ржПржХржЯрж╛ JSON format ржПрж░ ржбрзЗржЯрж╛ ржжрзЗржЦрж╛ржЪрзНржЫрзЛред""")

st.subheader(""" 
             JSON ржорж╛ржирзЗ ржХрзА?
JSON (JavaScript Object Notation) рж╣рж▓рзЛ ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржУ ржЖржжрж╛ржи-ржкрзНрж░ржжрж╛ржирзЗрж░ ржПржХржЯрж┐ ржЬржиржкрзНрж░рж┐рзЯ ржлрж░ржорзНржпрж╛ржЯред
             
{
             
    "name": "Streamlit App",           # ржЕрзНржпрж╛ржкрзЗрж░ ржирж╛ржо
             
    "version": "1.0",                  # ржнрж╛рж░рзНрж╕ржи ржиржорзНржмрж░
             
    "features": ["simple", "fast", "interactive"]  # ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣
}
ЁЯФ╕ st.json() ржлрж╛ржВрж╢ржи ржПржЗ JSON ржбрзЗржЯрж╛ржХрзЗ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржжрзЗржЦрж╛рзЯ тАФ
ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржПржЯрж╛ ржжрзЗржЦрждрзЗ ржЦрзБржм рж╕рж╛ржЬрж╛ржирзЛ ржУ рж░ржЩрж┐ржи рж╣рзЯ, ржпрж╛рждрзЗ ржмрзЛржЭрж╛ рж╕рж╣ржЬ рж╣рзЯред

""")

st.write("ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ live ржЙржжрж╛рж╣рж░ржг рж╕рж╣ demo ржХрзЛржб ржжрж┐ржЪрзНржЫрж┐, ржпрзЗржЯрж╛ рждрзБржорж┐ ржирж┐ржЬрзЗрж░ Streamlit ржЕрзНржпрж╛ржкрзЗ ржЪрж╛рж▓рж┐рзЯрзЗ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЛред ржПрждрзЗ рждрзБржорж┐ ржжрзЗржЦржмрзЗ ржХрзАржнрж╛ржмрзЗ st.json() ржХрж╛ржЬ ржХрж░рзЗ ржПржмржВ JSON ржбрзЗржЯрж╛ ржХрзЗржоржиржнрж╛ржмрзЗ ржжрзЗржЦрж╛рзЯред")


st.title("ЁЯУж JSON ржбрзЗржЯрж╛рж░ рж▓рж╛ржЗржн ржбрзЗржорзЛ")

# рж╕рж╛ржмрж╣рзЗржбрж┐ржВ
st.subheader("ЁЯОУ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ рждржерзНржп")

# JSON ржбрзЗржЯрж╛ рждрзИрж░рж┐
student_data = {
    "ржирж╛ржо": "рж░рж╛рж╣рзБрж▓ ржЗрж╕рж▓рж╛ржо",
    "рж╢рзНрж░рзЗржгрж┐": "рззрзжржо",
    "рж░рзЛрж▓": 5,
    "ржмрж┐рж╖рзЯржнрж┐рждрзНрждрж┐ржХ ржиржорзНржмрж░": {
        "ржЧржгрж┐ржд": 85,
        "ржмрж┐ржЬрзНржЮрж╛ржи": 90,
        "ржЗржВрж░рзЗржЬрж┐": 82
    },
    "ржкрж╛рж╕": True
}


# JSON ржжрзЗржЦрж╛ржирзЛ
st.json(student_data) 

st.divider()





st.subheader("ЁЯУИ Built-in Chart API")

chart_data = pd.DataFrame(
    np.random.randn(20, 3),
    columns=["A", "B", "C"]
)

st.write("ЁЯСЙ `st.line_chart()`")
st.line_chart(chart_data)

st.write("ЁЯСЙ `st.bar_chart()`")
st.bar_chart(chart_data)

st.write("ЁЯСЙ `st.area_chart()`")
st.area_chart(chart_data)

st.divider()
st.write("ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛ ржХржкрж┐ ржХрж░рзЗ рж░рж╛ржи ржХрж░.")

st.code('''st.subheader("ЁЯУИ Built-in Chart API")

chart_data = pd.DataFrame(
    np.random.randn(20, 3),
    columns=["A", "B", "C"]
)

st.write("ЁЯСЙ `st.line_chart()`")
st.line_chart(chart_data)

st.write("ЁЯСЙ `st.bar_chart()`")
st.bar_chart(chart_data)

st.write("ЁЯСЙ `st.area_chart()`")
st.area_chart(chart_data)''', language="bash")

st.subheader("ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛ ржмрзНржпрж╛ржЦрзНржпрж╛:")

st.subheader("""ржбрзЗржЯрж╛ рждрзИрж░рж┐:

chart_data = pd.DataFrame(
             
    np.random.randn(20, 3),
             
    columns=["A", "B", "C"]
)
             
 ржмрзНржпрж╛ржЦрзНржпрж╛:

np.random.randn(20, 3) тЖТ ржПржЯрж╛ рзирзжржЯрж┐ рж╕рж╛рж░рж┐ (row) ржПржмржВ рзйржЯрж┐ ржХрж▓рж╛ржо (column) рж╕рж╣ ржПржХрж╛-ржПржХрж╛ random рж╕ржВржЦрзНржпрж╛ рждрзИрж░рж┐ ржХрж░рзЗред

columns=["A", "B", "C"] тЖТ ржПржЗ ржбрзЗржЯрж╛рж░ ржХрж▓рж╛ржоржЧрзБрж▓рзЛрж░ ржирж╛ржо рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗ A, B, ржУ Cред

ЁЯОп рждрзБржорж┐ ржзрж░рзЗ ржирж┐рждрзЗ ржкрж╛рж░рзЛ ржПржЯрж╛ рзирзж ржжрж┐ржирзЗрж░ рждржерзНржп, ржпрзЗржЦрж╛ржирзЗ рзйржЯрж╛ ржЖрж▓рж╛ржжрж╛ ржлрж┐ржЪрж╛рж░ (A, B, C) ржПрж░ ржнрзНржпрж╛рж▓рзБ ржЖржЫрзЗред""")

st.subheader("""рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯ:

st.write("ЁЯСЙ `st.line_chart()`")
             
st.line_chart(chart_data)
             
тЮбя╕П ржПржЦрж╛ржирзЗ рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯ рждрзИрж░рж┐ рж╣ржмрзЗред
             
ржкрзНрж░рждрж┐ржЯрж┐ ржХрж▓рж╛ржо (A, B, C) ржПрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ рж▓рж╛ржЗржи ржЖржБржХрж╛ рж╣ржмрзЗред
             
ржПржЯрж┐ рж╕ржорзЯ ржмрж╛ рж╕рж┐рж░рж┐ржЬ ржбрзЗржЯрж╛ ржжрзЗржЦрж╛рждрзЗ ржнрж╛рж▓рзЛ ржХрж╛ржЬ ржХрж░рзЗред""")

st.subheader("""ржмрж╛рж░ ржЪрж╛рж░рзНржЯ:

st.write("ЁЯСЙ `st.bar_chart()`")
             
st.bar_chart(chart_data)
             
тЮбя╕П ржПржЯрж╛ bar chart ржжрзЗржЦрж╛рзЯ, ржпрзЗржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж╕рж╛рж░рж┐рж░ ржЬржирзНржп ржХрж▓рж╛ржо (A, B, C) ржПрж░ ржорж╛ржи ржмрж╛рж░ (ржжржгрзНржб) ржЖржХрж╛рж░рзЗ ржжрзЗржЦрж╛ржирзЛ рж╣рзЯред""")

st.subheader("""ржПрж░рж┐рзЯрж╛ ржЪрж╛рж░рзНржЯ:

st.write("ЁЯСЙ `st.area_chart()`")
             
st.area_chart(chart_data)
             
тЮбя╕П ржПржЯрж┐ рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯрзЗрж░ ржорждрзЛ, рждржмрзЗ ржирж┐ржЪрзЗрж░ ржЕржВрж╢ржЯрж╛ рж░ржЩ ржжрж┐рзЯрзЗ ржнрж░рж╛ржЯ ржХрж░рж╛ ржерж╛ржХрзЗред
             
ржПржЯрж╛ рждрзБрж▓ржирж╛ржорзВрж▓ржХржнрж╛ржмрзЗ ржнрж┐ржЬрзНржпрзБрзЯрж╛рж▓ ржбрж┐ржлрж╛рж░рзЗржирзНрж╕ ржЖрж░ржУ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржжрзЗржЦрж╛рзЯред""")

st.write("ржЪрж▓рзЛ ржЖржорж░рж╛ ржПржХржЯрж╛ рж▓рж╛ржЗржн ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХржЯрж┐ржн ржбрзЗржорзЛ ржмрж╛ржирж╛ржЗ ржпрзЗржЦрж╛ржирзЗ ржЗржЙржЬрж╛рж░ рж╕рзНрж▓рж╛ржЗржбрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржХрзЯржЯрж╛ рж╕рж╛рж░рж┐ ржбрзЗржЯрж╛ ржЪрж╛рж░рзНржЯрзЗ ржжрзЗржЦрж╛ржмрзЗ")

st.title("рж▓рж╛ржЗржн ржбрзЗржорзЛ ржХрзЛржб")

st.code('''import streamlit as st
import pandas as pd
import numpy as np

# ржЯрж╛ржЗржЯрзЗрж▓
st.title("ЁЯУК ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХржЯрж┐ржн ржЪрж╛рж░рзНржЯ ржбрзЗржорзЛ")

# рж╕рж╛ржмрж╣рзЗржбрж┐ржВ
st.subheader("ЁЯФв ржЖржкржирж┐ ржХрзЯржЯрж╛ рж╕рж╛рж░рж┐ (row) ржжрзЗржЦрждрзЗ ржЪрж╛ржи?")

# рж╕рзНрж▓рж╛ржЗржбрж╛рж░
rows = st.slider("ржбрзЗржЯрж╛рж░ ржкрж░рж┐ржорж╛ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи", min_value=5, max_value=100, value=20, step=5)

# ржбрзЗржЯрж╛ рждрзИрж░рж┐
chart_data = pd.DataFrame(
    np.random.randn(rows, 3),
    columns=["A", "B", "C"]
)

st.write("ЁЯФН ржирж┐рж░рзНржмрж╛ржЪрж┐ржд рж╕рж╛рж░рж┐ рж╕ржВржЦрзНржпрж╛:", rows)

# рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯ
st.subheader("ЁЯУИ рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯ")
st.line_chart(chart_data)

# ржмрж╛рж░ ржЪрж╛рж░рзНржЯ
st.subheader("ЁЯУК ржмрж╛рж░ ржЪрж╛рж░рзНржЯ")
st.bar_chart(chart_data)

# ржПрж░рж┐рзЯрж╛ ржЪрж╛рж░рзНржЯ
st.subheader("ЁЯУЙ ржПрж░рж┐рзЯрж╛ ржЪрж╛рж░рзНржЯ")
st.area_chart(chart_data)
''', language="bash")

st.write("ржХрзЛржб рж░рж╛ржи ржХрж░рж╛рж░ ржкрж░:")

import streamlit as st
import pandas as pd
import numpy as np

# ржЯрж╛ржЗржЯрзЗрж▓
st.title("ЁЯУК ржЗржирзНржЯрж╛рж░тАНрзНржпрж╛ржХржЯрж┐ржн ржЪрж╛рж░рзНржЯ ржбрзЗржорзЛ")

# рж╕рж╛ржмрж╣рзЗржбрж┐ржВ
st.subheader("ЁЯФв ржЖржкржирж┐ ржХрзЯржЯрж╛ рж╕рж╛рж░рж┐ (row) ржжрзЗржЦрждрзЗ ржЪрж╛ржи?")

# рж╕рзНрж▓рж╛ржЗржбрж╛рж░
rows = st.slider("ржбрзЗржЯрж╛рж░ ржкрж░рж┐ржорж╛ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи", min_value=5, max_value=100, value=20, step=5)

# ржбрзЗржЯрж╛ рждрзИрж░рж┐
chart_data = pd.DataFrame(
    np.random.randn(rows, 3),
    columns=["A", "B", "C"]
)

st.write("ЁЯФН ржирж┐рж░рзНржмрж╛ржЪрж┐ржд рж╕рж╛рж░рж┐ рж╕ржВржЦрзНржпрж╛:", rows)

# рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯ
st.subheader("ЁЯУИ рж▓рж╛ржЗржи ржЪрж╛рж░рзНржЯ")
st.line_chart(chart_data)

# ржмрж╛рж░ ржЪрж╛рж░рзНржЯ
st.subheader("ЁЯУК ржмрж╛рж░ ржЪрж╛рж░рзНржЯ")
st.bar_chart(chart_data)

# ржПрж░рж┐рзЯрж╛ ржЪрж╛рж░рзНржЯ
st.subheader("ЁЯУЙ ржПрж░рж┐рзЯрж╛ ржЪрж╛рж░рзНржЯ")
st.area_chart(chart_data)
st.divider()

st.subheader("ЁЯУК Custom Chart: Plotly")

plot_data = pd.DataFrame({
    "рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА": ["рж░рж╛рж╣рзБрж▓", "рж╕рзБржоржирж╛", "ржЬрзЛржмрж╛ржпрж╝рзЗрж░", "рждрзГрж╖рж╛"],
    "рж╕рзНржХрзЛрж░": [85, 92, 78, 88]
})

fig = px.bar(plot_data, x="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА", y="рж╕рзНржХрзЛрж░", title="Plotly Bar Chart")
st.plotly_chart(fig)

st.divider()

st.write("ржирж┐ржЪрзЗрж░ ржХрзЛржбржЧрзБрж▓рзЛ ржХржкрж┐ ржХрж░рзЛ")

st.code('''st.subheader("ЁЯУК Custom Chart: Plotly")

plot_data = pd.DataFrame({
    "рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА": ["рж░рж╛рж╣рзБрж▓", "рж╕рзБржоржирж╛", "ржЬрзЛржмрж╛ржпрж╝рзЗрж░", "рждрзГрж╖рж╛"],
    "рж╕рзНржХрзЛрж░": [85, 92, 78, 88]
})

fig = px.bar(plot_data, x="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА", y="рж╕рзНржХрзЛрж░", title="Plotly Bar Chart")
st.plotly_chart(fig)''', language="bash")



st.subheader("""ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛрж░ ржмрзНржпрж╛ржЦрзНржпрж╛:

plot_data = pd.DataFrame({
             
    "рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА": ["рж░рж╛рж╣рзБрж▓", "рж╕рзБржоржирж╛", "ржЬрзЛржмрж╛ржпрж╝рзЗрж░", "рждрзГрж╖рж╛"],
             
    "рж╕рзНржХрзЛрж░": [85, 92, 78, 88]
})
             
ЁЯФ╕ ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ ржПржХржЯрж┐ DataFrame рждрзИрж░рж┐ ржХрж░ржЫрж┐
             
ЁЯФ╕ ржПрждрзЗ рзиржЯрж┐ ржХрж▓рж╛ржо ржЖржЫрзЗ:

рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА	  рж╕рзНржХрзЛрж░
             
рж░рж╛рж╣рзБрж▓	  85
             
рж╕рзБржоржирж╛	  92
             
ржЬрзЛржмрж╛ржпрж╝рзЗрж░	  78
             
рждрзГрж╖рж╛	  88


fig = px.bar(plot_data, x="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА", y="рж╕рзНржХрзЛрж░", title="Plotly Bar Chart")
             
ЁЯФ╣ ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ plotly.express.bar() ржлрж╛ржВрж╢ржи ржжрж┐рзЯрзЗ ржПржХржЯрж┐ Bar Chart ржмрж╛ржирж╛ржЪрзНржЫрж┐ред

x="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА" тЖТ ржПржХрзНрж╕-ржЕржХрзНрж╕рж┐рж╕рзЗ ржерж╛ржХржмрзЗ ржирж╛ржоржЧрзБрж▓рзЛ (рж░рж╛рж╣рзБрж▓, рж╕рзБржоржирж╛...)

y="рж╕рзНржХрзЛрж░" тЖТ ржУрзЯрж╛ржЗ-ржЕржХрзНрж╕рж┐рж╕рзЗ ржерж╛ржХржмрзЗ ржирж╛ржо ржЕржирзБржпрж╛рзЯрзА рждрж╛ржжрзЗрж░ рж╕рзНржХрзЛрж░
             
title="Plotly Bar Chart" тЖТ ржЪрж╛рж░рзНржЯрзЗрж░ ржЙржкрж░рзЗ ржПржЗ рж╢рж┐рж░рзЛржирж╛ржо ржжрзЗржЦрж╛ржмрзЗ

st.plotly_chart(fig)
ЁЯФ╕ ржПржЗ рж▓рж╛ржЗржирзЗ ржЖржорж░рж╛ Streamlit ржжрж┐рзЯрзЗ ржЪрж╛рж░рзНржЯржЯрж╛ ржУрзЯрзЗржмржкрзЗржЬрзЗ ржжрзЗржЦрж╛ржЪрзНржЫрж┐ред
             

тЬЕ ржЖржЙржЯржкрзБржЯ ржХрзЗржоржи рж╣рзЯ?
             
ржПржХржЯрж╛ рж╕рзБржирзНржжрж░ Bar Chart ржЖрж╕ржмрзЗ ржпрзЗржЦрж╛ржирзЗ:

ржПржХрзНрж╕-ржЕржХрзНрж╕рж┐рж╕рзЗ ржерж╛ржХржмрзЗ рзк ржЬржи рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ ржирж╛ржо

ржУрзЯрж╛ржЗ-ржЕржХрзНрж╕рж┐рж╕рзЗ ржерж╛ржХржмрзЗ рждрж╛ржжрзЗрж░ рж╕рзНржХрзЛрж░

ржкрзНрж░рждрж┐ржЯрж┐ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ ржЬржирзНржп ржПржХржЯрж┐ ржмрж╛рж░ ржжрзЗржЦрж╛ржмрзЗ (ржпржд ржмрзЗрж╢рж┐ рж╕рзНржХрзЛрж░, рждржд ржЙржБржЪрзБ ржмрж╛рж░)""")
st.divider()

st.subheader("ЁЯУЙ Custom Chart: Matplotlib")

fig2, ax = plt.subplots()
ax.plot([1, 2, 3], [10, 20, 5])
ax.set_title("Matplotlib Line Plot")
st.pyplot(fig2)

st.divider()

st.write("ржирж┐ржЪрзЗрж░ ржХрзЛржбржЧрзБрж▓рзЛ ржХржкрж┐ ржХрж░рзЛ")

st.code('''st.subheader("ЁЯУЙ Custom Chart: Matplotlib")

fig2, ax = plt.subplots()
ax.plot([1, 2, 3], [10, 20, 5])
ax.set_title("Matplotlib Line Plot")
st.pyplot(fig2)''', language="bash")

st.subheader("""ржХрзЛржбржЧрзБрж▓рзЛрж░ ржмрзНржпрж╛ржЦрзНржпрж╛:
             
st.subheader("ЁЯУЙ Custom Chart: Matplotlib")

fig2, ax = plt.subplots()                    # ржПржХржЯрж┐ ржлрж┐ржЧрж╛рж░ ржУ ржЕрзНржпрж╛ржХрзНрж╕рж┐рж╕ (Graph ржПрж░ ржЦрж╛рж▓рж┐ ржХрзНржпрж╛ржиржнрж╛рж╕) рждрзИрж░рж┐

ax.plot([1, 2, 3], [10, 20, 5])              # X = 1,2,3 ржЖрж░ Y = 10,20,5 ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ рж▓рж╛ржЗржирзЗрж░ ржЪрж╛рж░рзНржЯ ржЖржБржХрж╛

ax.set_title("Matplotlib Line Plot")        # ржЪрж╛рж░рзНржЯрзЗрж░ ржЙржкрж░рзЗ ржПржХржЯрж╛ ржЯрж╛ржЗржЯрзЗрж▓ ржжрзЗрзЯрж╛ рж╣ржЪрзНржЫрзЗ

st.pyplot(fig2)                              # Streamlit ржП ржЪрж╛рж░рзНржЯржЯрж┐ ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
""")
st.divider()





st.subheader("ЁЯОи Custom Chart: Altair")

alt_chart = alt.Chart(plot_data).mark_bar().encode(
    x="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА",
    y="рж╕рзНржХрзЛрж░",
    color="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА"
).properties(title="Altair Bar Chart")

st.altair_chart(alt_chart, use_container_width=True)

st.divider()

st.write("ржирж┐ржЪрзЗрж░ ржХрзЛржбржЧрзБрж▓рзЛ ржХржкрж┐ ржХрж░рзЛ")
st.code('''st.subheader("ЁЯОи Custom Chart: Altair")

alt_chart = alt.Chart(plot_data).mark_bar().encode(
    x="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА",
    y="рж╕рзНржХрзЛрж░",
    color="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА"
).properties(title="Altair Bar Chart")

st.altair_chart(alt_chart, use_container_width=True)''', language="bash")

st.subheader(""" ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
             
ЁЯФ╣ plot_data ржХрзА?
             
ржПржЯрж┐ ржПржХржЯрж┐ DataFrame ржпрзЗржЯрж┐рждрзЗ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАржжрзЗрж░ ржирж╛ржо ржПржмржВ рждрж╛ржжрзЗрж░ рж╕рзНржХрзЛрж░ ржЖржЫрзЗ:


plot_data = pd.DataFrame({
             
    "рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА": ["рж░рж╛рж╣рзБрж▓", "рж╕рзБржоржирж╛", "ржЬрзЛржмрж╛ржпрж╝рзЗрж░", "рждрзГрж╖рж╛"],
             
    "рж╕рзНржХрзЛрж░": [85, 92, 78, 88]
})
             
ЁЯФ╕ 1. alt.Chart(plot_data)
             
ЁЯСЙ Altair рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржжрж┐рзЯрзЗ ржПржХржЯрж┐ ржЪрж╛рж░рзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, ржпрж╛рж░ ржбрзЗржЯрж╛ рж╣ржЪрзНржЫрзЗ plot_dataред

ЁЯФ╕ 2. .mark_bar()
             
ЁЯСЙ ржПржЗ рж▓рж╛ржЗржирзЗ ржмрж▓рж╛ рж╣ржЪрзНржЫрзЗ, тАЬржЖржорж┐ ржПржХржЯрж╛ ржмрж╛рж░ ржЪрж╛рж░рзНржЯ (Bar Chart) ржмрж╛ржирж╛рждрзЗ ржЪрж╛ржЗредтАЭ

ЁЯФ╕ 3. .encode(...)
             
ЁЯСЙ ржПржЗ ржЕржВрж╢рзЗ ржмрж▓рж╛ рж╣ржЪрзНржЫрзЗ, ржЪрж╛рж░рзНржЯрзЗ ржХрзЛржи рждржерзНржп ржХрзЛржи ржЕржХрзНрж╖ (axis) ржУ рж░ржЩрзЗ ржжрзЗржЦрж╛ржмрзЗ:

x="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА" тЖТ X-ржЕржХрзНрж╖рзЗ ржерж╛ржХржмрзЗ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАржжрзЗрж░ ржирж╛ржоред

y="рж╕рзНржХрзЛрж░" тЖТ Y-ржЕржХрзНрж╖рзЗ ржерж╛ржХржмрзЗ рждрж╛ржжрзЗрж░ рж╕рзНржХрзЛрж░ред

color="рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА" тЖТ ржкрзНрж░рждрж┐ржЯрж┐ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ ржмрж╛рж░-ржПрж░ рж░ржЩ ржЖрж▓рж╛ржжрж╛ рж╣ржмрзЗред

ЁЯФ╕ 4. .properties(title="Altair Bar Chart")
             
ЁЯСЙ ржЪрж╛рж░рзНржЯрзЗрж░ ржЙржкрж░рзЗ Altair Bar Chart ржЯрж╛ржЗржЯрзЗрж▓ ржжрзЗржЦрж╛ржмрзЗред

ЁЯФ╕ 5. st.altair_chart(...)
             
ЁЯСЙ ржПржЗ рж▓рж╛ржЗржи ржжрж┐рзЯрзЗ Streamlit-ржП ржЪрж╛рж░рзНржЯржЯрж┐ ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗред

use_container_width=True ржорж╛ржирзЗ ржЪрж╛рж░рзНржЯржЯрж┐ ржкрзБрж░рзЛ ржкрзНрж░рж╕рзНрже ржЬрзБрзЬрзЗ (responsive) ржжрзЗржЦрж╛ржмрзЗред

""")
st.divider()




st.subheader("""
тЬЕ рж░рж╛ржи ржХрж░рж╛рж░ ржкрж░ рждрзБржорж┐ ржпрж╛ ржжрзЗржЦрждрзЗ ржкрж╛ржмрзЗ:
ЁЯФ╕ JSON, DataFrame, Table рж╕рж╣ ржбрзЗржЯрж╛
ЁЯФ╕ Random ржЪрж╛рж░рзНржЯ
ЁЯФ╕ Plotly, Matplotlib, Altair тАФ рзй ржзрж░ржирзЗрж░ ржХрж╛рж╕рзНржЯржо ржЪрж╛рж░рзНржЯ         
""")

st.subheader("""
         
тЬНя╕П ржХрзА ржХрж░рзЗ ржПржЦржи:
ржПржЗ ржХрзЛржб ржХржкрж┐ ржХрж░рзЗ pages/4_Data_and_Visualization.py ржлрж╛ржЗрж▓рзЗ рж░рж╛ржЦрзЛ

streamlit run app.py ржЪрж╛рж▓рж╛ржУ

рж╕рж╛ржЗржбржмрж╛рж░ ржерзЗржХрзЗ ржЕржзрзНржпрж╛рзЯ рзк: ржбрзЗржЯрж╛ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржУ Visualization рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзЛ

ржирж┐ржЬрзЗржЗ ржЪрж╛рж░рзНржЯ ржЪрзЗржХ ржХрж░рзЛ, ржЯрзЗрж╕рзНржЯ ржХрж░рзЛ, ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЛ
""")






