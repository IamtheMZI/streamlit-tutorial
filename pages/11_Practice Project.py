import streamlit as st
import pandas as pd
import requests
import plotly.express as px


st.title("""ржЕржзрзНржпрж╛рзЯ рззрзж: ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржкрзНрж░ржЬрзЗржХрзНржЯ""")

st.subheader("""ржнрзВржорж┐ржХрж╛
             
ржПржЗ ржЕржзрзНржпрж╛рзЯрзЗ ржЖржорж░рж╛ ржХрж┐ржЫрзБ ржкрзНрж░рзНржпрж╛ржХржЯрж┐ржХрзНржпрж╛рж▓ ржкрзНрж░ржЬрзЗржХрзНржЯ ржмрж╛ржирж╛ржмрзЛ ржпрзЗржЧрзБрж▓рзЛ ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ Streamlit ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рждрзИрж░рж┐рж░ ржкржерзЗ рждрзЛржорж╛рж░ ржжржХрзНрж╖рждрж╛ ржЖрж░ржУ ржмрж╛рзЬрж╛ржмрзЗред ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ ржерж╛ржХржмрзЗ рж░рж┐рзЯрзЗрж▓ ржбрзЗржЯрж╛, ржЗржЙржЬрж╛рж░ ржЗржиржкрзБржЯ, ржПржмржВ ржбрзЗржЯрж╛ ржнрж┐ржЬрзНржпрзБрзЯрж╛рж▓рж╛ржЗржЬрзЗрж╢ржиред ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╢рзЗржЦрж╛ рж╣ржмрзЗ ржпрзЗржи рждрзБржорж┐ ржирж┐ржЬрзЗрж░ ржорждрзЛ ржХрж░рзЗ ржлрж┐ржЪрж╛рж░ ржЕрзНржпрж╛ржб ржХрж░рждрзЗ ржкрж╛рж░рзЛред""")

st.subheader("""ржкрзНрж░ржЬрзЗржХрзНржЯ рждрж╛рж▓рж┐ржХрж╛:
             
ЁЯУК COVID Dashboard

ЁЯУж ржЗржиржнрзЗржирзНржЯрж░рж┐ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ

ЁЯУБ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╕рж┐рж╕рзНржЯрзЗржо

ЁЯОУ ржЕржирж▓рж╛ржЗржи ржХрзБржЗржЬ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо""")

st.subheader("""ржЗ ржкрзЛрж╕рзНржЯрзЗ рждрзБржорж┐ рж╢рж┐ржЦржмрзЗ тАФ
             
API ржерзЗржХрзЗ ржХрж┐ржнрж╛ржмрзЗ ржбрзЗржЯрж╛ ржЖржирж╛ ржпрж╛рзЯ

JSON ржбрзЗржЯрж╛ ржХрзАржнрж╛ржмрзЗ DataFrame-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЛ

ржбрзЗржЯрж╛ ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рзЛ ржжрзЗрж╢ ржЕржирзБрж╕рж╛рж░рзЗ

ржЪрж╛рж░рзНржЯ рждрзИрж░рж┐ ржХрж░рзЛ Plotly ржжрж┐рзЯрзЗ

Streamlit ржЕрзНржпрж╛ржкрзЗ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржжрзЗржЦрж╛ржУ""")

st.subheader("""ржзрж╛ржк рзз: ржХрзА ржХрзА рж▓рж╛ржЧржмрзЗ?
рждрзЛржорж╛рж░ ржкрзНрж░рзЯрзЛржЬржи рж╣ржмрзЗ:
             
| ржирж╛ржо                 | ржЙржжрзНржжрзЗрж╢рзНржп                           |
|---------------------|-------------------------------------|
| **Python**          | ржорзВрж▓ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛                |
| **Streamlit**       | UI рждрзИрж░рж┐ ржХрж░рждрзЗ                       |
| **Pandas**          | ржбрзЗржЯрж╛ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ                      |
| **Matplotlib / Plotly** | ржЪрж╛рж░рзНржЯ ржУ ржЧрзНрж░рж╛ржл рждрзИрж░рж┐ ржХрж░рждрзЗ        |
| **SQLite / CSV**    | ржбрзЗржЯрж╛ рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп               |
| **OS / Pathlib**    | ржлрж╛ржЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╕рж┐рж╕рзНржЯрзЗржорзЗ) |

""")

st.write("ржЗржирж╕рзНржЯрж▓ ржХрж░рждрзЗ ржкрж╛рж░рзЛ ржПржЗржнрж╛ржмрзЗ:")
st.code('''pip install streamlit pandas matplotlib plotly
''', language="bash")

st.subheader("""ржкрзНрж░ржЬрзЗржХрзНржЯ рзз: COVID Dashboard
             
ЁЯУК Objective: API ржерзЗржХрзЗ COVID-19 ржПрж░ рж░рж┐рзЯрзЗрж▓ржЯрж╛ржЗржо ржбрзЗржЯрж╛ ржирж┐рзЯрзЗ Streamlit ржЕрзНржпрж╛ржкрзЗ ржкрзНрж░рзЗржЬрзЗржирзНржЯ ржХрж░рж╛ред
""")

st.write("ржЪрж▓ ржЖржорж░рж╛ Step-by-Step ржжрзЗржЦрж┐ ржХрзАржнрж╛ржмрзЗ COVID Dashboard ржмрж╛ржирж╛ржирзЛ ржпрж╛рзЯ Streamlit ржжрж┐рзЯрзЗ, ржпрзЗржЦрж╛ржирзЗ API ржерзЗржХрзЗ COVID ржбрзЗржЯрж╛ ржПржирзЗ рж╕рзЗржЯрж╛ржХрзЗ ржЯрзЗржмрж┐рж▓ ржУ ржЧрзНрж░рж╛ржл ржЖржХрж╛рж░рзЗ ржжрзЗржЦрж╛ржмрзЛред")



st.subheader("""ржПржЗ ржкрзЛрж╕рзНржЯрзЗ рждрзБржорж┐ рж╢рж┐ржЦржмрзЗ тАФ
             
API ржерзЗржХрзЗ ржХрж┐ржнрж╛ржмрзЗ ржбрзЗржЯрж╛ ржЖржирж╛ ржпрж╛рзЯ

JSON ржбрзЗржЯрж╛ ржХрзАржнрж╛ржмрзЗ DataFrame-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЛ

ржбрзЗржЯрж╛ ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рзЛ ржжрзЗрж╢ ржЕржирзБрж╕рж╛рж░рзЗ

ржЪрж╛рж░рзНржЯ рждрзИрж░рж┐ ржХрж░рзЛ Plotly ржжрж┐рзЯрзЗ

Streamlit ржЕрзНржпрж╛ржкрзЗ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржжрзЗржЦрж╛ржУ""")

st.subheader("ржзрж╛ржк рзз: ржХрзА ржХрзА рж▓рж╛ржЧржмрзЗ")
st.code('''pip install streamlit pandas matplotlib plotly
''', language="bash")


st.subheader("ржлрзЛрж▓рзНржбрж╛рж░ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░:")
st.code('''Streamlit/
тФЬтФАтФА covid_dashboard.py
''', language="bash")


st.subheader("ржзрж╛ржк рзи: ржХрзЛржб рж▓рж┐ржЦрзЛ (covid_dashboard.py)")
st.write("ржирж┐ржЪрзЗрж░ ржХрзЛржбржЧрзБрж▓рзЛ ржХржкрж┐ ржХрж░рзЛ")
st.code('''# covid_dashboard.py

import streamlit as st
import pandas as pd
import requests
import plotly.express as px

# тЬЕ Page config
st.set_page_config(page_title="COVID Dashboard", layout="wide")

# тЬЕ Title
st.title("ЁЯжа Global COVID-19 Dashboard")
st.markdown("Real-time COVID-19 data powered by disease.sh API.")

# тЬЕ Step 1: Fetch data from API
url = "https://disease.sh/v3/covid-19/countries"
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
    df = pd.json_normalize(data)
    
    # тЬЕ Step 2: Select specific columns
    df = df[["country", "cases", "todayCases", "deaths", "todayDeaths", "recovered", "active", "population"]]
    
    # тЬЕ Step 3: Sidebar Filter
    countries = df["country"].sort_values().unique()
    selected_countries = st.sidebar.multiselect("ЁЯМН Select Countries", countries, default=["India", "USA", "Brazil"])
    
    filtered_df = df[df["country"].isin(selected_countries)]

    # тЬЕ Step 4: Show Table
    st.subheader("ЁЯУЛ COVID-19 Data Table")
    st.dataframe(filtered_df.set_index("country"))

    # тЬЕ Step 5: Show Graphs
    st.subheader("ЁЯУК Total Cases per Country")
    fig = px.bar(filtered_df, x="country", y="cases", color="country", title="Total Cases")
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("ЁЯУК Today's Cases per Country")
    fig2 = px.bar(filtered_df, x="country", y="todayCases", color="country", title="Today's Cases")
    st.plotly_chart(fig2, use_container_width=True)

else:
    st.error("тЭМ Failed to fetch data from the API.")
''', language="bash")

with st.expander("ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржжрзЗржЦрзБржи:"):
    st.write("ржЙржкрж░рзЗрж░ ржХрзЛржбржЧрзБрж▓рзЛрж░ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж╛ рж╣рж▓рзЛ:")

    #Library Import
    st.subheader(""" 1. рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛
                 
    import streamlit as st          
    import pandas as pd          
    import requests           
    import plotly.express as px
                 
    ЁЯФ╣ streamlit: UI рждрзИрж░рж┐ ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯ (ржУрзЯрзЗржм ржЕрзНржпрж╛ржк)ред    
    ЁЯФ╣ pandas: ржбрзЗржЯрж╛ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ/ржЯрзЗржмрж┐рж▓ ржлрж░ржорзНржпрж╛ржЯрзЗ ржХрж╛ржЬ ржХрж░рж╛рж░ ржЬржирзНржпред      
    ЁЯФ╣ requests: API ржерзЗржХрзЗ рж░рж┐рзЯрзЗрж▓-ржЯрж╛ржЗржо ржбрзЗржЯрж╛ ржЖржирждрзЗ ржмрзНржпржмрж╣рзГрждред      
    ЁЯФ╣ plotly.express: ржЧрзНрж░рж╛ржл ржПржмржВ ржЪрж╛рж░рзНржЯ ржЖржБржХрж╛рж░ ржЬржирзНржпред""")

    #Page configuration
    st.subheader("""2. ржкрзЗржЬ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи

    st.set_page_config(page_title="COVID Dashboard", layout="wide")
                 
    ЁЯФ╕ ржПржЗ рж▓рж╛ржЗржирзЗ Streamlit ржЕрзНржпрж╛ржкрзЗрж░ ржкрзЗржЬрзЗрж░ ржирж╛ржо COVID Dashboard ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред      
    ЁЯФ╕ layout="wide" ржорж╛ржирзЗ ржкрзБрж░рзЛ рж╕рзНржХрзНрж░рж┐ржи ржЬрзБрзЬрзЗ ржУрзЯрж╛ржЗржб рж▓рзЗржЖржЙржЯ рж╣ржмрзЗред""")

    #Title and description
    st.subheader("""3. рж╢рж┐рж░рзЛржирж╛ржо ржУ ржмрж┐ржмрж░ржг
    st.title("ЁЯжа Global COVID-19 Dashboard")         
    st.markdown("Real-time COVID-19 data powered by disease.sh API.")
                 
    ЁЯФ╣ ржЕрзНржпрж╛ржкрзЗ ржПржХржЯрж┐ ржмрзЬ ржЯрж╛ржЗржЯрзЗрж▓ ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗред        
    ЁЯФ╣ markdown() ржжрж┐рзЯрзЗ ржирж┐ржЪрзЗ ржПржХржЯрж┐ ржЫрзЛржЯ ржмрж┐ржмрж░ржг ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред""")


    #Fetching data from API
    st.subheader("""4. API ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржЖржирж╛
    url = "https://disease.sh/v3/covid-19/countries"         
    response = requests.get(url)
          
    ЁЯФ╕ ржПржЦрж╛ржирзЗ disease.sh API ржерзЗржХрзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржжрзЗрж╢рзЗрж░ COVID-19 ржбрзЗржЯрж╛ ржЖржиржЫрзЗред         
    ЁЯФ╕ response рж╣ржЪрзНржЫрзЗ HTTP рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯрзЗрж░ рж░рзЗржЬрж╛рж▓рзНржЯред""")


    #Create a DataFrame by checking the data
    st.subheader("""5. ржбрзЗржЯрж╛ ржЪрзЗржХ ржХрж░рзЗ DataFrame рждрзИрж░рж┐
    if response.status_code == 200:      
        data = response.json()      
        df = pd.json_normalize(data)
                 
    ЁЯФ╣ ржпржжрж┐ API рж╕ржлрж▓ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ (status code 200), рждрж╛рж╣рж▓рзЗ:      
    ЁЯФ╕ .json() ржжрж┐рзЯрзЗ JSON ржбрзЗржЯрж╛ржХрзЗ ржкрж╛ржЗржержи ржбрж┐ржХрж╢ржирж╛рж░рж┐рждрзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред       
    ЁЯФ╕ pd.json_normalize() ржжрж┐рзЯрзЗ nested JSON ржХрзЗ DataFrame ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░ржЫрзЗред""")


    #Country name filter in the sidebar
    st.subheader("""рж╕рж╛ржЗржбржмрж╛рж░рзЗ ржжрзЗрж╢рзЗрж░ ржирж╛ржо ржлрж┐рж▓рзНржЯрж╛рж░
    countries = df["country"].sort_values().unique()            
    selected_countries = st.sidebar.multiselect("ЁЯМН Select Countries", countries, default=["India", "USA", "Brazil"])
                 
    ЁЯФ╣ ржЗржЙржЬрж╛рж░ рж╕рж╛ржЗржбржмрж╛рж░ ржерзЗржХрзЗ ржжрзЗрж╢ ржмрзЗржЫрзЗ ржирж┐рждрзЗ ржкрж╛рж░ржмрзЗред        
    ЁЯФ╣ ржбрж┐ржлрж▓рзНржЯржнрж╛ржмрзЗ India, USA, Brazil рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рж╛ ржерж╛ржХржмрзЗред""")


    #Data filter based on selected country
    st.subheader("""8. ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржжрзЗрж╢рзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржбрзЗржЯрж╛ ржлрж┐рж▓рзНржЯрж╛рж░
    filtered_df = df[df["country"].isin(selected_countries)]
                 
    ЁЯФ╕ ржЗржЙржЬрж╛рж░ ржпрзЗрж╕ржм ржжрзЗрж╢ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░ржмрзЗ, рж╢рзБржзрзБ рж╕рзЗржЗ ржжрзЗрж╢ржЧрзБрж▓рзЛрж░ ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛ рж╣ржмрзЗред""")


    #Showing data table
    st.subheader("""9. ржбрзЗржЯрж╛ ржЯрзЗржмрж┐рж▓ ржжрзЗржЦрж╛ржирзЛ
    st.subheader("ЁЯУЛ COVID-19 Data Table")          
    st.dataframe(filtered_df.set_index("country"))
                 
    ЁЯФ╣ subheader() ржжрж┐рзЯрзЗ ржЯрзЗржмрж┐рж▓рзЗрж░ рж╣рзЗржбрж┐ржВ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред
    ЁЯФ╣ set_index("country") ржжрж┐рзЯрзЗ ржЯрзЗржмрж┐рж▓рзЗрж░ index рж╣рж┐рж╕рзЗржмрзЗ ржжрзЗрж╢рзЗрж░ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред""")


    #Total Cases Graph
    st.subheader("""10. Total Cases ржЧрзНрж░рж╛ржл

    st.subheader("ЁЯУК Total Cases per Country")
    fig = px.bar(filtered_df, x="country", y="cases", color="country", title="Total Cases")
    st.plotly_chart(fig, use_container_width=True)
                 
    ЁЯФ╣ Bar Chart ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ ржХрзЛржи ржжрзЗрж╢рзЗ ржорзЛржЯ ржХрждржЯрж┐ ржХрзЗрж╕ рж╣рзЯрзЗржЫрзЗред
    ЁЯФ╣ plotly_chart() ржжрж┐рзЯрзЗ Streamlit-ржП ржЧрзНрж░рж╛ржл рж░рзЗржирзНржбрж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
    """)

    #Today's Cases Graph
    st.subheader("""11. Today's Cases ржЧрзНрж░рж╛ржл

    st.subheader("ЁЯУК Today's Cases per Country")
    fig2 = px.bar(filtered_df, x="country", y="todayCases", color="country", title="Today's Cases")
    st.plotly_chart(fig2, use_container_width=True)
                 
    ЁЯФ╣ ржЖрж░рзЗржХржЯрж┐ Bar Chart тАУ ржПржЗржмрж╛рж░ ржжрзЗржЦрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ ржЖржЬржХрзЗрж░ ржирждрзБржи ржХрзЗрж╕рзЗрж░ рж╕ржВржЦрзНржпрж╛ ржкрзНрж░рждрж┐ ржжрзЗрж╢рзЗред""")

    #API Error Handling
    st.subheader(""" 12. API Error Handling

    else:
        st.error("тЭМ Failed to fetch data from the API.")
                 
    ЁЯФ╣ ржпржжрж┐ API ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржирж╛ ржЖрж╕рзЗ, рждрж╛рж╣рж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржПржХржЯрж┐ Error Message ржжрзЗржЦрж╛ржирзЛ рж╣ржмрзЗред""")



st.subheader("ржЙржкрж░рзЗрж░ ржХрзЛржбрзЗрж░ ржЖржЙржЯржкрзБржЯ:")
# covid_dashboard.py


# тЬЕ Title
st.title("ЁЯжа Global COVID-19 Dashboard")
st.markdown("Real-time COVID-19 data powered by disease.sh API.")

# тЬЕ Step 1: Fetch data from API
url = "https://disease.sh/v3/covid-19/countries"
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
    df = pd.json_normalize(data)
    
    # тЬЕ Step 2: Select specific columns
    df = df[["country", "cases", "todayCases", "deaths", "todayDeaths", "recovered", "active", "population"]]
    
    # тЬЕ Step 3: Main page Filter
    countries = df["country"].sort_values().unique()
    selected_countries = st.multiselect("ЁЯМН Select Countries", countries, default=["India", "USA", "Brazil"])
    
    filtered_df = df[df["country"].isin(selected_countries)]

    # тЬЕ Step 4: Show Table
    st.subheader("ЁЯУЛ COVID-19 Data Table")
    st.dataframe(filtered_df.set_index("country"))

    # тЬЕ Step 5: Show Graphs
    st.subheader("ЁЯУК Total Cases per Country")
    fig = px.bar(filtered_df, x="country", y="cases", color="country", title="Total Cases")
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("ЁЯУК Today's Cases per Country")
    fig2 = px.bar(filtered_df, x="country", y="todayCases", color="country", title="Today's Cases")
    st.plotly_chart(fig2, use_container_width=True)

else:
    st.error("тЭМ Failed to fetch data from the API.")


#Code Run 
st.subheader(" рж░рж╛ржи ржХрж░рж╛рж░ ржирж┐рзЯржо")
st.code('''streamlit run covid_dashboard.py
''', language="bash")


#Next step
st.subheader("""ржкрж░ржмрж░рзНрждрзА ржзрж╛ржк ржХрзА рж╣рждрзЗ ржкрж╛рж░рзЗ?
             
Pie Chart ржмрж╛ Line Graph ржпрзЛржЧ ржХрж░рзЛ

Historical data ржирж┐рзЯрзЗ ржЯрж╛ржЗржорж▓рж╛ржЗржи ржЧрзНрж░рж╛ржл ржмрж╛ржирж╛ржУ

Dark/Light Mode ржпрзБржХрзНржд ржХрж░рзЛ

ржЗржЙржЬрж╛рж░рзЗрж░ рж▓рзЛржХрзЗрж╢ржи ржзрж░рзЗ ржЕржЯрзЛржжрзЗрж╢ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзЛ""")


st.subheader("""ржкрзНрж░ржЬрзЗржХрзНржЯ рзз: ржЗржиржнрзЗржирзНржЯрж░рж┐ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╕рж┐рж╕рзНржЯрзЗржо
             
ЁЯОп ржЙржжрзНржжрзЗрж╢рзНржп:
             
ржПржЗ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЖржорж░рж╛ ржПржХржЯрж┐ ржЫрзЛржЯ ржЗржиржнрзЗржирзНржЯрж░рж┐ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░ржм, ржпрзЗржЦрж╛ржирзЗ ржирждрзБржи ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржпрзЛржЧ ржХрж░рж╛ ржпрж╛ржмрзЗ, ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ ржПржмржВ CSV ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛ ржпрж╛ржмрзЗред""")


st.subheader("""ржзрж╛ржк рзз: ржХрзА ржХрзА рж▓рж╛ржЧржмрзЗ?
рждрзЛржорж╛рж░ ржкрзНрж░рзЯрзЛржЬржи рж╣ржмрзЗ:
             
| ржирж╛ржо                 | ржЙржжрзНржжрзЗрж╢рзНржп                           |
|---------------------|-------------------------------------|
| **Python**          | ржорзВрж▓ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛                |
| **Streamlit**       | UI рждрзИрж░рж┐ ржХрж░рждрзЗ                       |
| **Pandas**          | ржбрзЗржЯрж╛ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ                      |
| **Matplotlib / Plotly** | ржЪрж╛рж░рзНржЯ ржУ ржЧрзНрж░рж╛ржл рждрзИрж░рж┐ ржХрж░рждрзЗ        |
| **SQLite / CSV**    | ржбрзЗржЯрж╛ рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп               |
| **OS / Pathlib**    | ржлрж╛ржЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╕рж┐рж╕рзНржЯрзЗржорзЗ) |

""")

st.subheader("""ржЗржирзНрж╕ржЯрж▓ ржХрж░рждрзЗ:

pip install streamlit pandas""")

st.subheader("ржзрж╛ржк рзи: ржкрзНрж░ржЬрзЗржХрзНржЯ ржлрзЛрж▓рзНржбрж╛рж░ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░")
st.code('''inventory_app/
тФВ
тФЬтФАтФА app.py
тФЬтФАтФА data/
тФВ   тФФтФАтФА products.csv
тФЬтФАтФА images/
тФВ   тФФтФАтФА product1.png
''', language="basj")

st.write("""app.py тЖТ ржорзВрж▓ рж╕рзНржЯрзНрж░рж┐ржорж▓рж┐ржЯ ржЕрзНржпрж╛ржк

data/products.csv тЖТ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждржерзНржп

images/ тЖТ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЫржмрж┐ рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржлрзЛрж▓рзНржбрж╛рж░""")


st.subheader("ржзрж╛ржк рзй: ржкрзНрж░рж╛ржержорж┐ржХ ржХрзЛржб (Streamlit UI ржУ CSV рж▓рзЛржб)")
st.code('''# app.py

import streamlit as st
import pandas as pd
import os

st.set_page_config(page_title="Inventory Management", layout="wide")
st.title("ЁЯУж ржЗржиржнрзЗржирзНржЯрж░рж┐ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╕рж┐рж╕рзНржЯрзЗржо")

# тЬЕ CSV ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛
DATA_FILE = "data/products.csv"

if os.path.exists(DATA_FILE):
    df = pd.read_csv(DATA_FILE)
else:
    df = pd.DataFrame(columns=["Title", "Description", "Image"])

# тЬЕ ржЯрзЗржмрж┐рж▓ ржЖржХрж╛рж░рзЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржжрзЗржЦрж╛ржирзЛ
st.subheader("ЁЯз╛ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждрж╛рж▓рж┐ржХрж╛")
st.dataframe(df)
''', language="bash")




st.subheader("ржзрж╛ржк рзк: ржирждрзБржи ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржпрзБржХрзНржд ржХрж░рж╛ (ржлрж░рзНржо ржЗржиржкрзБржЯ рж╕рж╣)")
st.code('''st.subheader("тЮХ ржирждрзБржи ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржпрзБржХрзНржд ржХрж░рзБржи")

with st.form("product_form", clear_on_submit=True):
    title = st.text_input("ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж╛ржо")
    description = st.text_area("ржмрж░рзНржгржирж╛")
    image_file = st.file_uploader("ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи", type=["png", "jpg", "jpeg"])
    submit = st.form_submit_button("тЬЕ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи")

    if submit:
        if title and description and image_file:
            image_path = f"images/{image_file.name}"
            with open(image_path, "wb") as f:
                f.write(image_file.getbuffer())

            new_data = {"Title": title, "Description": description, "Image": image_path}
            df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
            df.to_csv(DATA_FILE, index=False)
            st.success("ЁЯОЙ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрзБржХрзНржд рж╣рзЯрзЗржЫрзЗ!")
        else:
            st.error("тЪая╕П рж╕ржм рждржерзНржп ржкрзВрж░ржг ржХрж░рзБржиред")

''', language="bash")


st.subheader(" ржзрж╛ржк рзл: ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржХрж╛рж░рзНржб ржЖржХрж╛рж░рзЗ ржжрзЗржЦрж╛ржирзЛ (ржЫржмрж┐ рж╕рж╣)")
st.code('''st.subheader("ЁЯЦ╝я╕П ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржнрж┐ржЙ")

for _, row in df.iterrows():
    with st.container():
        cols = st.columns([1, 3])
        with cols[0]:
            if os.path.exists(row["Image"]):
                st.image(row["Image"], width=100)
            else:
                st.warning("ЁЯУ╖ ржЫржмрж┐ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐")
        with cols[1]:
            st.markdown(f"### {row['Title']}")
            st.write(row["Description"])
        st.markdown("---")
''', language="bash")

st.subheader("""ржЪрзВрзЬрж╛ржирзНржд ржлрж▓рж╛ржлрж▓ (Output):
             
ржЗржЙржЬрж╛рж░ ржирждрзБржи ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржпрзБржХрзНржд ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ

CSV ржлрж╛ржЗрж▓рзЗ рждржерзНржп рж╕рзЗржн рж╣ржмрзЗ

рж╕ржм ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржПржХржЯрж┐ ржХрж╛рж░рзНржб рж╕рзНржЯрж╛ржЗрж▓рзЗ ржЫржмрж┐рж╕рж╣ ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ""")

st.write("ржмрж┐ржГ ржжрзНрж░рзГржГ рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ рждрзЛржорж╛рж░ products.csv file ржПржЗ ржирж┐ржЪрзЗрж░ csv file ржЯрж╛ ржПржб ржХрж░рждрзЗ ржкрж╛рж░рзЛ:")
st.code('''Title,Description,Image
Pen,Blue ink pen,images/pen.png
Notebook,100-page notebook,images/notebook.jpg
Camera,High Powerfull Dsler camera,images/old-used-olympus-om-film-camera-olympus-mm-shift-lens-perspective-contr-old-used-brassed-olympus-om-film-camera-201027136.jpg
''')


